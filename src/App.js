import React, { useState, useEffect, useRef } from 'react';
import { registerServiceWorker } from './registerServiceWorker';
import './App.css';

function App() {
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const [showModal, setShowModal] = useState(false);
  const [modalTitle, setModalTitle] = useState('');
  const [modalMessage, setModalMessage] = useState('');
  const featuresRef = useRef(null);

  useEffect(() => {
    registerServiceWorker();

    const handleOnline = () => {
      setIsOnline(true);
      showNotification('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', '–í—ã —Å–Ω–æ–≤–∞ –æ–Ω–ª–∞–π–Ω!');
    };
    
    const handleOffline = () => {
      setIsOnline(false);
      showNotification('–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ');
    };

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  const showNotification = (title, message) => {
    setModalTitle(title);
    setModalMessage(message);
    setShowModal(true);
    setTimeout(() => {
      setShowModal(false);
    }, 20000);
  };

  const handleTestNotification = () => {
    showNotification(
      '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', 
      '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'
    );
  };

  const handleCloseModal = () => {
    setShowModal(false);
  };

  const handleFeatureClick = (feature) => {
    showNotification(
      `–§—É–Ω–∫—Ü–∏—è: ${feature}`,
      `–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é "${feature}". –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –º–æ–¥–∞–ª–æ–∫`
    );
  };

  const scrollFeatures = (direction) => {
    if (featuresRef.current) {
      const scrollAmount = 300;
      featuresRef.current.scrollBy({
        left: direction === 'left' ? -scrollAmount : scrollAmount,
        behavior: 'smooth'
      });
    }
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1 className="glitch-title">REDDPWA</h1>
        
        <div className="status-info">
          <p>–°—Ç–∞—Ç—É—Å —Å–µ—Ç–∏: 
            <span className={isOnline ? 'online' : 'offline'}>
              {isOnline ? ' –û–Ω–ª–∞–π–Ω' : ' –û—Ñ–ª–∞–π–Ω'}
            </span>
          </p>
        </div>

        <div className="actions">
          <button 
            onClick={handleTestNotification}
            className="btn btn-primary"
          >
            –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
          </button>
        </div>

        {/* –û–∫–Ω–æ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ */}
        <div className="features-window">
          <div className="window-header">
            <h2>–§—É–Ω–∫—Ü–∏–∏ PWA</h2>
          </div>
          
          <div className="features-container">
            <button 
              className="scroll-btn scroll-left"
              onClick={() => scrollFeatures('left')}
            >
              ‚Äπ
            </button>
            
            <div className="features-horizontal" ref={featuresRef}>
               <div 
              className="feature-item"
              onClick={() => handleFeatureClick('–û—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º')}
            >
              <div className="feature-icon">
                <img src="/icons/offline-icon.png" alt="–û—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º" />
              </div>
              <div className="feature-content">
                <h3>–û—Ñ–ª–∞–π–Ω-—Ä–∞–±–æ—Ç–∞</h3>
                <p>–†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞</p>
              </div>
            </div>
              
              <div 
                className="feature-item"
                onClick={() => handleFeatureClick('–ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞')}
              >
                <div className="feature-icon">‚ö°</div>
                <div className="feature-content">
                  <h3>–ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞</h3>
                  <p>–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤</p>
                </div>
              </div>
              
              <div 
                className="feature-item"
                onClick={() => handleFeatureClick('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')}
              >
                <div className="feature-icon">üîî</div>
                <div className="feature-content">
                  <h3>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
                  <p>–í—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞</p>
                </div>
              </div>
              
              <div 
                className="feature-item"
                onClick={() => handleFeatureClick('–£—Å—Ç–∞–Ω–æ–≤–∫–∞')}
              >
                <div className="feature-icon">üì±</div>
                <div className="feature-content">
                  <h3>–£—Å—Ç–∞–Ω–æ–≤–∫–∞</h3>
                  <p>–ù–∞ –¥–æ–º–∞—à–Ω–∏–π —ç–∫—Ä–∞–Ω</p>
                </div>
              </div>

              {/* –î–æ–±–∞–≤–∏–º –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∫—Ä–æ–ª–ª–∞ */}
              <div 
                className="feature-item"
                onClick={() => handleFeatureClick('–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å')}
              >
                <div className="feature-icon">üîí</div>
                <div className="feature-content">
                  <h3>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</h3>
                  <p>HTTPS –ø—Ä–æ—Ç–æ–∫–æ–ª</p>
                </div>
              </div>
              
              <div 
                className="feature-item"
                onClick={() => handleFeatureClick('–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å')}
              >
                <div className="feature-icon">üìê</div>
                <div className="feature-content">
                  <h3>–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å</h3>
                  <p>–î–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤</p>
                </div>
              </div>
            </div>
            
            <button 
              className="scroll-btn scroll-right"
              onClick={() => scrollFeatures('right')}
            >
              ‚Ä∫
            </button>
          </div>
        </div>

        {/* –ú–æ–¥–∞–ª–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
        {showModal && (
          <div className="modal-overlay" onClick={handleCloseModal}>
            <div className="modal" onClick={(e) => e.stopPropagation()}>
              <div className="modal-header">
                <h3>{modalTitle}</h3>
                <button className="modal-close" onClick={handleCloseModal}>
                  √ó
                </button>
              </div>
              <div className="modal-body">
                <p>{modalMessage}</p>
              </div>
              <div className="modal-footer">
                <button 
                  className="btn btn-secondary" 
                  onClick={handleCloseModal}
                >
                  –ó–∞–∫—Ä—ã—Ç—å
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ */}
        {showModal && (
          <div className="toast-notification">
            <div className="toast-icon">üîî</div>
            <div className="toast-content">
              <div className="toast-title">{modalTitle}</div>
              <div className="toast-message">{modalMessage}</div>
            </div>
            <button className="toast-close" onClick={handleCloseModal}>
              √ó
            </button>
          </div>
        )}
      </header>
    </div>
  );
}

export default App;